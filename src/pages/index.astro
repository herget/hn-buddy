---
// import DayPosts from '../components/DayPosts.astro'; // Removed as DayPosts component is no longer used here
import '../styles/global.css';
import GitHubButton from '../components/GitHubButton.astro';

// --- Date Setup for Latest Digest (Yesterday) ---
const today = new Date();
const yesterday = new Date(today);
yesterday.setDate(today.getDate() - 1);

const dayBeforeYesterday = new Date(today);
dayBeforeYesterday.setDate(today.getDate() - 2);

const dateOptions: Intl.DateTimeFormatOptions = { 
  weekday: 'long', 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
};

const displayDateForNav = yesterday.toLocaleDateString(undefined, dateOptions);
const hnSearchApiDateStart = Math.floor(new Date(yesterday).setUTCHours(0,0,0,0)/1000);
const hnSearchApiDateEnd = Math.floor(new Date(yesterday).setUTCHours(23,59,59,999)/1000);

// --- Navigation URLs ---
// Previous day will point to a dynamic route for the day before yesterday
const prevDayIsoDate = `${dayBeforeYesterday.getFullYear()}-${String(dayBeforeYesterday.getMonth() + 1).padStart(2, '0')}-${String(dayBeforeYesterday.getDate()).padStart(2, '0')}`;
const prevDayUrl = `/${prevDayIsoDate}`;

const latestDigestUrl = '/'; // Link to self for "Latest Digest"

// Enable static site generation with incremental rebuilds (applies if using an adapter that supports ISR)
export const prerender = true;

// This might be superseded by dynamic Cache-Control headers for SSR deployments
export const config = {
  cache: {
    maxAge: 86400, // Cache for 24 hours
  },
};

// --- Listmonk API Fetching for Yesterday's Digest ---
const LISTMONK_API_URL = import.meta.env.ASTRO_LISTMONK_API_URL;
// console.log('ASTRO_LISTMONK_API_URL as seen by Astro:', JSON.stringify(LISTMONK_API_URL)); // Debug line, remove or keep as needed
const LISTMONK_API_CREDENTIALS = import.meta.env.ASTRO_LISTMONK_API_KEY; // Expected format: "username:token"

let campaignContent = '<p>Loading newsletter...</p>';
let campaignNameForDisplay = 'N/A'; // This will be yesterday's campaign name
let errorOccurred = false;

function getStartOfDayUTC(date: Date): Date {
  const d = new Date(date.getTime());
  d.setUTCHours(0, 0, 0, 0);
  return d;
}

if (!LISTMONK_API_URL || !LISTMONK_API_CREDENTIALS) {
  console.error("Listmonk API URL or Credentials not set in .env. Ensure ASTRO_LISTMONK_API_URL and ASTRO_LISTMONK_API_KEY are defined.");
  campaignContent = '<p><strong>Configuration Error:</strong> Listmonk API URL or Credentials are not set. Please check server .env configuration.</p>';
  campaignNameForDisplay = 'Configuration Error';
  errorOccurred = true;
} else {
  try {
    const yesterdayStartUTC = getStartOfDayUTC(yesterday);
    const formattedDateCheck = yesterdayStartUTC.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    const expectedCampaignName = `HN Buddy Daily Digest - ${formattedDateCheck}`;
    campaignNameForDisplay = expectedCampaignName;

    const encodedCredentials = btoa(LISTMONK_API_CREDENTIALS);
    const listmonkCampaignsUrl = `${LISTMONK_API_URL}/api/campaigns`;
    const params = new URLSearchParams({
        query: expectedCampaignName,
        page: '1',
        per_page: '1'
    });
    const checkUrl = `${listmonkCampaignsUrl}?${params.toString()}`;

    const response = await fetch(checkUrl, {
      method: 'GET',
      headers: { 'Authorization': `Basic ${encodedCredentials}` }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Failed to fetch campaign (Status ${response.status}): ${errorText}`);
      let displayError = `Listmonk API request failed with status ${response.status}.`;
      if (response.status === 401) displayError += " Please check your API credentials.";
      else if (response.status === 404 && LISTMONK_API_URL?.includes('localhost')) displayError += " Ensure Listmonk is running.";
      throw new Error(displayError);
    }

    const responseData = await response.json();
    if (responseData.data?.results && responseData.data.results.length > 0) {
      const campaign = responseData.data.results[0];
      if (campaign.body) {
        campaignContent = campaign.body;
        Astro.response.headers.set('Cache-Control', 'public, max-age=86400, s-maxage=86400');
      } else {
        campaignContent = `<p>The newsletter for "${expectedCampaignName}" was found, but its content is currently unavailable.</p>`;
        errorOccurred = true;
      }
    } else {
      campaignContent = `<p>No newsletter found for "${expectedCampaignName}". It might not have been generated yet.</p>`;
      Astro.response.headers.set('Cache-Control', 'public, max-age=3600, s-maxage=3600');
    }
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    campaignContent = `<p><strong>Error loading newsletter:</strong> ${errorMessage}. Please check server logs.</p>`;
    campaignNameForDisplay = 'Error';
    errorOccurred = true;
  }
}

if (errorOccurred && campaignNameForDisplay === 'Configuration Error') {
    Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
} else if (errorOccurred) {
    Astro.response.headers.set('Cache-Control', 'public, max-age=300, s-maxage=300');
}

let pageTitleSuffix;
if (campaignNameForDisplay && campaignNameForDisplay.startsWith('HN Buddy Daily Digest - ')) {
  pageTitleSuffix = campaignNameForDisplay.replace('HN Buddy Daily Digest - ', '');
} else if (campaignNameForDisplay === 'Configuration Error') {
  pageTitleSuffix = "Configuration Error";
} else if (campaignNameForDisplay === 'Error') {
  pageTitleSuffix = "Error Loading Digest";
} else {
  pageTitleSuffix = displayDateForNav; // Use yesterday's date for title if campaign name is unusual but not an error
}
const pageTitle = `HN Buddy - ${pageTitleSuffix}`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={`HN Buddy - A daily digest of top Hacker News posts and comments for ${pageTitleSuffix}`} />
    <title>{pageTitle}</title>
  </head>
  <body>
    <header>
      <div class="container header-container">
        <div class="header-content">
        <h1>HN Buddy</h1>
        <p>Daily digest of top Hacker News posts and comments</p>
        </div>
        <div class="header-actions">
          <GitHubButton repo="herget/hn-buddy" />
        </div>
      </div>
    </header>
    
    <nav class="day-nav container">
      <div class="day-nav-inner">
        <a href={prevDayUrl} class="nav-btn prev-day">
          <span class="nav-arrow">←</span> Previous Day
        </a>
        <div class="current-day">
          <h2>{displayDateForNav}</h2>
          <div class="day-meta">
            <a href={latestDigestUrl} class="today-link">Latest Digest</a>
            |
            <a href={`https://hn.algolia.com/?dateRange=custom&dateStart=${hnSearchApiDateStart}&dateEnd=${hnSearchApiDateEnd}&type=story&query=&sort=byPopularity`} 
               target="_blank" 
               rel="noopener noreferrer"
               class="api-link">
              View in HN Search
            </a>
          </div>
        </div>
        <a href="#" class="nav-btn next-day disabled" aria-disabled="true" onclick="return false;">
          Next Day <span class="nav-arrow">→</span>
        </a>
      </div>
    </nav>
    
    <main class="container">
      {(errorOccurred || campaignContent.includes("No newsletter found for") || campaignContent.includes("Configuration Error:") || campaignContent.includes("Error loading newsletter:")) ? (
        <div class={errorOccurred ? "status-message error" : "status-message info"} set:html={campaignContent} />
      ) : (
        <div class="newsletter-container" set:html={campaignContent} />
      )}
    </main>
    
    <footer>
      <div class="container">
        <p>
          Built with <a href="https://astro.build" target="_blank" rel="noopener noreferrer">Astro</a> | 
          Data from <a href="https://news.ycombinator.com" target="_blank" rel="noopener noreferrer">Hacker News</a> via 
          <a href="https://hn.algolia.com/api" target="_blank" rel="noopener noreferrer">HN Search API</a>
        </p>
      </div>
    </footer>
  </body>
</html>

<style>
  /* Ensure global.css is imported or necessary base styles are present */
  .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .header-content {
    flex: 1;
  }
  
  .header-actions {
    display: flex;
    gap: 1rem;
  }
  
  .error-message { /* This class seems unused, status-message is used instead */
    padding: 1rem;
    background-color: #ffeeee;
    border: 1px solid #ffcccc;
    border-radius: 4px;
    margin-bottom: 1rem;
  }

  .status-message {
      padding: 15px;
      margin-bottom: 20px;
      border-radius: 4px;
      text-align: center;
      font-size: 1.05em;
  }
  .status-message.error {
      background-color: #ffebee; /* Light red */
      color: #c62828; /* Dark red */
      border: 1px solid #e57373; /* Softer red border */
  }
  .status-message.info {
      background-color: #e3f2fd; /* Light blue */
      color: #1565c0; /* Dark blue */
      border: 1px solid #64b5f6; /* Softer blue border */
  }
  
  .day-nav {
    margin-bottom: 2rem;
    margin-top: -1rem; /* Adjust if needed based on header style */
  }
  
  .day-nav-inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: #fff;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }
  
  .current-day {
    text-align: center;
  }
  
  .current-day h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
  }
  
  .day-meta {
    font-size: 0.875rem;
    color: #666;
    margin-top: 0.25rem;
  }
  
  .today-link, .api-link {
    color: #0366d6;
    text-decoration: none;
    margin: 0 0.25rem;
  }
  
  .api-link {
    color: #9c9c9c; /* Softer color for the external link */
  }
  
  .today-link:hover, .api-link:hover {
    text-decoration: underline;
  }
  
  .nav-btn {
    display: flex;
    align-items: center;
    background-color: #f5f5f5;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    color: #333;
    font-size: 0.875rem;
    text-decoration: none;
    transition: background-color 0.2s;
  }
  
  .nav-btn:hover {
    background-color: #e5e5e5;
  }
  
  .nav-btn.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none; /* To prevent click if using just href="#" and CSS to style */
  }
  
  .nav-arrow {
    font-size: 1.25rem;
    line-height: 1;
  }
  
  .prev-day .nav-arrow {
    margin-right: 0.5rem;
  }
  
  .next-day .nav-arrow {
    margin-left: 0.5rem;
  }

  .newsletter-container {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 25px;
    margin-top: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
  }
  .newsletter-container .header { text-align: center; margin-bottom: 30px; }
  .newsletter-container .header h1 { color: #f60; font-size: 1.8em !important; } 
  .newsletter-container .summary { background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
  .newsletter-container h2 { color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px; font-size: 1.5em; }
  .newsletter-container .post { margin-bottom: 30px; padding: 20px; border: 1px solid #eee; border-radius: 4px; }
  .newsletter-container .post-title { margin: 0 0 10px 0; font-size: 1.4em; }
  .newsletter-container .post-title a { color: #000; text-decoration: none; }
  .newsletter-container .post-title a:hover { text-decoration: underline; }
  .newsletter-container .post-title span { font-size: 0.8em; color: #666; margin-left: 5px; }
  .newsletter-container .post-meta { font-size: 0.9em; color: #666; margin-bottom: 15px; }
  .newsletter-container .post-meta a { color: #007bff; text-decoration: none; }
  .newsletter-container .post-meta a:hover { text-decoration: underline; }
  .newsletter-container .post-meta .points { color: #f60; font-weight: 600; }
  
  @media (max-width: 640px) {
    .header-container {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }
    
    .header-actions {
      width: 100%;
      /* Consider centering or other responsive adjustments for actions */
    }
    
    .day-nav-inner {
      flex-direction: column;
      gap: 1rem;
    }
    
    .nav-btn {
      width: 100%;
      justify-content: center;
    }
  }
</style> 
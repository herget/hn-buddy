---
import DayPosts from '../components/DayPosts.astro';
import '../styles/global.css';

// Define types for our data
interface Comment {
  author: string;
  comment_text: string;
  created_at: string;
  objectID: string;
  points: number;
  story_id: string;
}

interface Post {
  title: string;
  url: string;
  author: string;
  points: number;
  created_at: string;
  objectID: string;
  num_comments: number;
}

interface PostWithComments {
  post: Post;
  topComments: Comment[];
}

interface DayData {
  dayStartISOString: string;
  posts: PostWithComments[];
  error?: string;
}

// Function to fetch directly from HN Algolia API
async function fetchHNDataDirectly(dayOffset = 0, postsPerDay = 10, commentsPerPost = 20) {
  const results = [];
  const now = new Date();
  
  function getStartOfDayUTC(date: Date): Date {
    const d = new Date(date);
    d.setUTCHours(0, 0, 0, 0);
    return d;
  }

  // Calculate the day we're fetching (dayOffset days ago)
  const dayRef = new Date(now);
  dayRef.setDate(dayRef.getDate() - dayOffset);
  
  const dayStart = getStartOfDayUTC(dayRef);
  const dayEnd = new Date(dayStart.getTime() + 24 * 60 * 60 * 1000);
  const numericDayStart = Math.floor(dayStart.getTime() / 1000);
  const numericDayEnd = Math.floor(dayEnd.getTime() / 1000);
  
  // Fetch front_page stories for that day via Algolia
  try {
    const algoliaURL = `https://hn.algolia.com/api/v1/search_by_date?tags=front_page&numericFilters=created_at_i>=${numericDayStart},created_at_i<${numericDayEnd}&hitsPerPage=50`;
    const algoliaResp = await fetch(algoliaURL);
    
    if (!algoliaResp.ok) {
      results.push({
        dayStartISOString: dayStart.toISOString(),
        posts: []
      });
      return { results };
    }
    
    const algoliaJSON = await algoliaResp.json();
    const hits = algoliaJSON.hits || [];
    
    // Sort by points, get top N
    const topStories = hits
      .sort((a: any, b: any) => (b.points ?? 0) - (a.points ?? 0))
      .slice(0, postsPerDay);
    
    const postsWithComments = [];
    
    for (const post of topStories) {
      // Use Algolia API to fetch comments for this story
      let topComments = [];
      try {
        const commentsURL = `https://hn.algolia.com/api/v1/search?tags=comment,story_${post.objectID}&hitsPerPage=${commentsPerPost}`;
        const commentsResp = await fetch(commentsURL);
        
        if (commentsResp.ok) {
          const commentsJSON = await commentsResp.json();
          topComments = (commentsJSON.hits || [])
            .sort((a: any, b: any) => (b.points ?? 0) - (a.points ?? 0));
        }
      } catch (e) {
        // Ignore comment fetch errors
      }
      
      postsWithComments.push({
        post,
        topComments
      });
    }
    
    results.push({
      dayStartISOString: dayStart.toISOString(),
      posts: postsWithComments
    });
  } catch (error) {
    results.push({
      dayStartISOString: dayStart.toISOString(),
      error: "Failed to fetch posts",
      posts: []
    });
  }
  
  return { results };
}

// Get day offset from URL parameters
const currentDayOffset = parseInt(Astro.url.searchParams.get('day') || '0');
const formattedDate = new Date();
formattedDate.setDate(formattedDate.getDate() - currentDayOffset);

// Initialize data and error state
let data: { results: DayData[] } = { results: [] };
let error: string | undefined = undefined;
let useDirectFetch = false;

try {
  // Try to use our API endpoint first
  const apiUrl = new URL('/api/hn-data', Astro.url.origin);
  apiUrl.searchParams.set('days', '1');
  apiUrl.searchParams.set('offset', currentDayOffset.toString());
  apiUrl.searchParams.set('posts', '10');
  apiUrl.searchParams.set('comments', '20');
  
  try {
    const response = await fetch(apiUrl.toString());
    
    if (!response.ok) {
      throw new Error(`API response not OK: ${response.status}`);
    }
    
    data = await response.json();
  } catch (apiError: any) {
    console.error('API endpoint error, falling back to direct fetch:', apiError);
    useDirectFetch = true;
    data = await fetchHNDataDirectly(currentDayOffset, 10, 20);
  }
} catch (err: any) {
  error = `Error fetching data: ${err.message}`;
  console.error('Fetch error:', err);
}

// Pagination URLs
const prevDayUrl = new URL(Astro.url);
prevDayUrl.searchParams.set('day', (currentDayOffset + 1).toString());

const nextDayUrl = new URL(Astro.url);
if (currentDayOffset > 0) {
  nextDayUrl.searchParams.set('day', (currentDayOffset - 1).toString());
} else {
  nextDayUrl.searchParams.set('day', '0');
}

const todayUrl = new URL(Astro.url);
todayUrl.searchParams.set('day', '0');

const dateOptions: Intl.DateTimeFormatOptions = { 
  weekday: 'long', 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
};
const displayDate = formattedDate.toLocaleDateString(undefined, dateOptions);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>HN Buddy - {displayDate}</title>
  </head>
  <body>
    <header>
      <div class="container">
        <h1>HN Buddy</h1>
        <p>Daily digest of top Hacker News posts and comments</p>
        {useDirectFetch && <span class="direct-fetch">Using direct HN API</span>}
      </div>
    </header>
    
    <nav class="day-nav container">
      <div class="day-nav-inner">
        <a href={prevDayUrl.toString()} class="nav-btn prev-day">
          <span class="nav-arrow">←</span> Previous Day
        </a>
        <div class="current-day">
          <h2>{displayDate}</h2>
          <div class="day-meta">
            <a href={todayUrl.toString()} class="today-link">Today</a>
            |
            <a href={`https://hn.algolia.com/?dateRange=custom&dateStart=${Math.floor(formattedDate.setHours(0,0,0,0)/1000)}&dateEnd=${Math.floor(formattedDate.setHours(23,59,59,999)/1000)}&type=story&query=&sort=byPopularity`} 
               target="_blank" 
               rel="noopener noreferrer"
               class="api-link">
              View in Algolia
            </a>
          </div>
        </div>
        <a href={nextDayUrl.toString()} class={`nav-btn next-day ${currentDayOffset === 0 ? 'disabled' : ''}`}>
          Next Day <span class="nav-arrow">→</span>
        </a>
      </div>
    </nav>
    
    <main class="container">
      {error ? (
        <div class="error-message">
          <p>{error}</p>
          <p>Please try again later.</p>
        </div>
      ) : data.results.length === 0 ? (
        <div class="loading">
          <p>Loading Hacker News content...</p>
        </div>
      ) : (
        data.results.map((day) => (
          <DayPosts dayStartISOString={day.dayStartISOString} posts={day.posts} />
        ))
      )}
    </main>
    
    <footer>
      <div class="container">
        <p>
          Built with <a href="https://astro.build" target="_blank" rel="noopener noreferrer">Astro</a> | 
          Data from <a href="https://news.ycombinator.com" target="_blank" rel="noopener noreferrer">Hacker News</a> via 
          <a href="https://hn.algolia.com/api" target="_blank" rel="noopener noreferrer">Algolia API</a>
        </p>
      </div>
    </footer>
  </body>
</html>

<style>
  .direct-fetch {
    background-color: #ff6600;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    margin-left: 1rem;
  }
  
  .error-message {
    padding: 1rem;
    background-color: #ffeeee;
    border: 1px solid #ffcccc;
    border-radius: 4px;
    margin-bottom: 1rem;
  }
  
  .loading {
    padding: 2rem;
    text-align: center;
    color: #666;
  }
  
  .day-nav {
    margin-bottom: 2rem;
    margin-top: -1rem;
  }
  
  .day-nav-inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: #fff;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }
  
  .current-day {
    text-align: center;
  }
  
  .current-day h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
  }
  
  .day-meta {
    font-size: 0.875rem;
    color: #666;
    margin-top: 0.25rem;
  }
  
  .today-link, .api-link {
    color: #0366d6;
    text-decoration: none;
    margin: 0 0.25rem;
  }
  
  .api-link {
    color: #9c9c9c;
  }
  
  .today-link:hover, .api-link:hover {
    text-decoration: underline;
  }
  
  .nav-btn {
    display: flex;
    align-items: center;
    background-color: #f5f5f5;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    color: #333;
    font-size: 0.875rem;
    text-decoration: none;
    transition: background-color 0.2s;
  }
  
  .nav-btn:hover {
    background-color: #e5e5e5;
  }
  
  .nav-btn.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .nav-arrow {
    font-size: 1.25rem;
    line-height: 1;
  }
  
  .prev-day .nav-arrow {
    margin-right: 0.5rem;
  }
  
  .next-day .nav-arrow {
    margin-left: 0.5rem;
  }
  
  @media (max-width: 640px) {
    .day-nav-inner {
      flex-direction: column;
      gap: 1rem;
    }
    
    .nav-btn {
      width: 100%;
      justify-content: center;
    }
  }
</style> 
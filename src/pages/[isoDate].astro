---
import '../styles/global.css'; // Corrected path assuming [isoDate].astro is in src/pages/
import GitHubButton from '../components/GitHubButton.astro'; // Corrected path

// --- Get isoDate from URL and Parse ---
const { isoDate } = Astro.params; // e.g., "2024-07-22"
let currentContentDate: Date | null = null; // Initialize to null
let dateParseError = false;

if (!isoDate || !/^\d{4}-\d{2}-\d{2}$/.test(isoDate)) {
  dateParseError = true;
} else {
  const parts = isoDate.split('-').map(Number);
  const parsedDate = new Date(Date.UTC(parts[0], parts[1] - 1, parts[2]));
  if (isNaN(parsedDate.getTime())) {
    dateParseError = true;
  } else {
    currentContentDate = parsedDate;
  }
}

// --- Date Setup for Navigation and Display ---
const today = new Date(); 
const yesterday = new Date(today);
yesterday.setUTCDate(today.getUTCDate() - 1);
yesterday.setUTCHours(0,0,0,0); 

let displayDateForNav = 'Invalid Date';
let hnSearchApiDateStart = 0;
let hnSearchApiDateEnd = 0;
let prevDayUrl = '#';
let nextDayUrl = '#';
let isNextDayLatest = false;

// All date-dependent operations must happen only if currentContentDate is valid
if (!dateParseError && currentContentDate) {
  const dateOptions: Intl.DateTimeFormatOptions = { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    timeZone: 'UTC'
  };
  displayDateForNav = currentContentDate.toLocaleDateString(undefined, dateOptions);

  hnSearchApiDateStart = Math.floor(new Date(currentContentDate).setUTCHours(0,0,0,0)/1000);
  hnSearchApiDateEnd = Math.floor(new Date(currentContentDate).setUTCHours(23,59,59,999)/1000);

  const prevContentDate = new Date(currentContentDate);
  prevContentDate.setUTCDate(currentContentDate.getUTCDate() - 1);
  const prevIsoDate = `${prevContentDate.getUTCFullYear()}-${String(prevContentDate.getUTCMonth() + 1).padStart(2, '0')}-${String(prevContentDate.getUTCDate()).padStart(2, '0')}`;
  prevDayUrl = `/${prevIsoDate}`;

  const nextContentDate = new Date(currentContentDate);
  nextContentDate.setUTCDate(currentContentDate.getUTCDate() + 1);
  
  const nextContentDateStartOfDayUTC = new Date(nextContentDate);
  nextContentDateStartOfDayUTC.setUTCHours(0,0,0,0);

  if (nextContentDateStartOfDayUTC.getTime() >= yesterday.getTime()) { 
    nextDayUrl = '/';
    isNextDayLatest = true; 
  } else {
    const nextIsoDate = `${nextContentDate.getUTCFullYear()}-${String(nextContentDate.getUTCMonth() + 1).padStart(2, '0')}-${String(nextContentDate.getUTCDate()).padStart(2, '0')}`;
    nextDayUrl = `/${nextIsoDate}`;
  }
} else {
  // Handle cases where dateParseError is true or currentContentDate is null
  // Set default/error values for navigation if necessary, or rely on initial '#' and 'Invalid Date'
  Astro.response.status = 400; // Ensure status is set if it wasn't already
}

const latestDigestUrl = '/';

export const prerender = false;

// --- Listmonk API Fetching (Placeholder - to be refactored) ---
const LISTMONK_API_URL = import.meta.env.ASTRO_LISTMONK_API_URL;
const LISTMONK_API_CREDENTIALS = import.meta.env.ASTRO_LISTMONK_API_KEY;

let campaignContent = '<p>Loading newsletter...</p>';
let campaignNameForDisplay = 'N/A';
let errorOccurred = dateParseError; // Initial error state based on date parsing

if (dateParseError) {
  campaignContent = '<p><strong>Error:</strong> The requested date is invalid. Check the URL format (YYYY-MM-DD).</p>';
  campaignNameForDisplay = 'Invalid Date';
  // Astro.response.status = 400; // Already set in the date processing block
}

// Placeholder for getStartOfDayUTC (will be moved to utility)
function getStartOfDayUTC(date: Date): Date {
  const d = new Date(date.getTime());
  d.setUTCHours(0, 0, 0, 0);
  return d;
}

// Proceed with API fetch only if date is valid and no prior config error
if (!errorOccurred && currentContentDate && LISTMONK_API_URL && LISTMONK_API_CREDENTIALS) {
  try {
    const targetDateStartUTC = getStartOfDayUTC(currentContentDate); // currentContentDate is now guaranteed to be a Date
    const formattedDateCheck = targetDateStartUTC.toLocaleDateString('en-US', {
      year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC'
    });
    const expectedCampaignName = `HN Buddy Daily Digest - ${formattedDateCheck}`;
    campaignNameForDisplay = expectedCampaignName;

    const encodedCredentials = btoa(LISTMONK_API_CREDENTIALS);
    const listmonkCampaignsUrl = `${LISTMONK_API_URL}/api/campaigns`;
    const params = new URLSearchParams({ query: expectedCampaignName, page: '1', per_page: '1' });
    const checkUrl = `${listmonkCampaignsUrl}?${params.toString()}`;

    const response = await fetch(checkUrl, {
      method: 'GET', headers: { 'Authorization': `Basic ${encodedCredentials}` }
    });

    if (!response.ok) {
      // More specific error for campaign not found vs other API errors
      if(response.status === 404) {
        campaignContent = `<p>No newsletter found for "${expectedCampaignName}".</p>`;
        // Not necessarily a server error, so don't set Astro.response.status = 500
      } else {
        throw new Error(`Listmonk API request failed: ${response.status}`);
      }
    }
    const responseData = await response.json();
    if (responseData.data?.results && responseData.data.results.length > 0 && responseData.data.results[0].body) {
      campaignContent = responseData.data.results[0].body;
      Astro.response.headers.set('Cache-Control', 'public, max-age=86400, s-maxage=86400'); 
    } else if (!campaignContent.includes("No newsletter found for")) { // Avoid overwriting specific 404 message
      campaignContent = `<p>No newsletter found for "${expectedCampaignName}".</p>`;
      Astro.response.headers.set('Cache-Control', 'public, max-age=3600, s-maxage=3600'); 
    }
  } catch (e: unknown) {
    const msg = e instanceof Error ? e.message : String(e);
    campaignContent = `<p><strong>Error loading newsletter:</strong> ${msg}.</p>`;
    campaignNameForDisplay = 'Error';
    errorOccurred = true; // Set errorOccurred for API errors
    if (Astro.response.status !== 400) Astro.response.status = 500; // Don't override bad request from date parse
  }
} else if (!errorOccurred && (!LISTMONK_API_URL || !LISTMONK_API_CREDENTIALS)) {
  // This block handles missing API config if date was valid initially
  console.error("Listmonk API URL or Credentials not set.");
  campaignContent = '<p><strong>Configuration Error:</strong> Listmonk API settings missing.</p>';
  campaignNameForDisplay = 'Configuration Error';
  errorOccurred = true;
  if (Astro.response.status !== 400) Astro.response.status = 500;
}

// Set cache headers for error states, being careful not to override 400 for bad date
if (errorOccurred && Astro.response.status !== 400) {
    if (campaignNameForDisplay === 'Configuration Error') {
        Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    } else { // For API errors (500)
        Astro.response.headers.set('Cache-Control', 'public, max-age=300, s-maxage=300');
    }
} else if (dateParseError) { // Ensure 400 from bad date also has no long cache
    Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
}

// --- Page Title ---
let pageTitleSuffix = displayDateForNav;
if (campaignNameForDisplay === 'Configuration Error') pageTitleSuffix = "Configuration Error";
else if (campaignNameForDisplay === 'Error') pageTitleSuffix = "Error Loading Digest";
else if (dateParseError) pageTitleSuffix = "Invalid Date";

const pageTitle = `HN Buddy - ${pageTitleSuffix}`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={`HN Buddy - Daily digest for ${pageTitleSuffix}`} />
    <title>{pageTitle}</title>
    <style is:inline>
      body { font-family: sans-serif; line-height: 1.6; padding: 20px; max-width: 900px; margin: 20px auto; background-color: #f9f9f9; color: #333; }
      .container { max-width: 900px; margin-left: auto; margin-right: auto; padding-left: 15px; padding-right: 15px; }
      header { margin-bottom:2rem; text-align:center; }
      .header-container { display: flex; justify-content: space-between; align-items: center; }
      .header-content { flex: 1; text-align: left; }
      .header-content h1 { color: #ff6600; margin-bottom: 0.1em; }
      .header-content p { font-size: 1.1em; color: #555; margin-top:0; }
      .header-actions { display: flex; gap: 1rem; }
      .status-message { padding: 15px; margin-bottom: 20px; border-radius: 4px; text-align: center; font-size: 1.05em; }
      .status-message.error { background-color: #ffebee; color: #c62828; border: 1px solid #e57373; }
      .status-message.info { background-color: #e3f2fd; color: #1565c0; border: 1px solid #64b5f6; }
      .day-nav { margin-bottom: 2rem; margin-top: 1rem; }
      .day-nav-inner { display: flex; align-items: center; justify-content: space-between; background-color: #fff; padding: 1rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
      .current-day { text-align: center; }
      .current-day h2 { margin: 0; font-size: 1.5rem; font-weight: 600; }
      .day-meta { font-size: 0.875rem; color: #666; margin-top: 0.25rem; }
      .today-link, .api-link { color: #0366d6; text-decoration: none; margin: 0 0.25rem; }
      .api-link { color: #9c9c9c; }
      .today-link:hover, .api-link:hover { text-decoration: underline; }
      .nav-btn { display: flex; align-items: center; background-color: #f5f5f5; border: none; padding: 0.5rem 1rem; border-radius: 4px; color: #333; font-size: 0.875rem; text-decoration: none; transition: background-color 0.2s; }
      .nav-btn:hover { background-color: #e5e5e5; }
      .nav-btn.disabled { opacity: 0.5; cursor: not-allowed; pointer-events: none; }
      .nav-arrow { font-size: 1.25rem; line-height: 1; }
      .prev-day .nav-arrow { margin-right: 0.5rem; }
      .next-day .nav-arrow { margin-left: 0.5rem; }
      .newsletter-container { background-color: #fff; border: 1px solid #ddd; padding: 25px; margin-top: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); }
      .newsletter-container .header { text-align: center; margin-bottom: 30px; }
      .newsletter-container .header h1 { color: #f60; font-size: 1.8em !important; }
      .newsletter-container .summary { background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
      .newsletter-container h2 { color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px; font-size: 1.5em; }
      .newsletter-container .post { margin-bottom: 30px; padding: 20px; border: 1px solid #eee; border-radius: 4px; }
      .newsletter-container .post-title { margin: 0 0 10px 0; font-size: 1.4em; }
      .newsletter-container .post-title a { color: #000; text-decoration: none; }
      .newsletter-container .post-title a:hover { text-decoration: underline; }
      .newsletter-container .post-title span { font-size: 0.8em; color: #666; margin-left: 5px; }
      .newsletter-container .post-meta { font-size: 0.9em; color: #666; margin-bottom: 15px; }
      .newsletter-container .post-meta a { color: #007bff; text-decoration: none; }
      .newsletter-container .post-meta a:hover { text-decoration: underline; }
      .newsletter-container .post-meta .points { color: #f60; font-weight: 600; }
      footer { text-align:center; font-size:0.9em; color: #777; margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; }
      @media (max-width: 640px) {
        .header-container { flex-direction: column; align-items: flex-start; gap: 1rem; }
        .header-actions { width: 100%; }
        .day-nav-inner { flex-direction: column; gap: 1rem; }
        .nav-btn { width: 100%; justify-content: center; }
      }
    </style>
  </head>
  <body>
    <header>
      <div class="container header-container">
        <div class="header-content">
        <h1>HN Buddy</h1>
        <p>Daily digest of top Hacker News posts and comments</p>
        </div>
        <div class="header-actions">
          <GitHubButton repo="herget/hn-buddy" />
        </div>
      </div>
    </header>
    
    <nav class="day-nav container">
      <div class="day-nav-inner">
        <a href={prevDayUrl} class="nav-btn prev-day">
          <span class="nav-arrow">←</span> Previous Day
        </a>
        <div class="current-day">
          <h2>{displayDateForNav}</h2>
          <div class="day-meta">
            <a href={latestDigestUrl} class="today-link">Latest Digest</a>
            |
            { !dateParseError && currentContentDate && (
              <a href={`https://hn.algolia.com/?dateRange=custom&dateStart=${hnSearchApiDateStart}&dateEnd=${hnSearchApiDateEnd}&type=story&query=&sort=byPopularity`} 
                 target="_blank" 
                 rel="noopener noreferrer"
                 class="api-link">
                View in HN Search
              </a>
            )}
          </div>
        </div>
        <a href={nextDayUrl} class={`nav-btn next-day ${isNextDayLatest && nextDayUrl === '/' ? '' : (nextDayUrl === '#' || dateParseError ? 'disabled' : '')}`}>
          {isNextDayLatest && nextDayUrl === '/' ? 'View Latest' : 'Next Day'} <span class="nav-arrow">→</span>
        </a>
      </div>
    </nav>
    
    <main class="container">
      {(errorOccurred || campaignContent.includes("No newsletter found for") || campaignContent.includes("Configuration Error:") || campaignContent.includes("Error loading newsletter:") || dateParseError) ? (
        <div class={errorOccurred || dateParseError ? "status-message error" : "status-message info"} set:html={campaignContent} />
      ) : (
        <div class="newsletter-container" set:html={campaignContent} />
      )}
    </main>
    
    <footer>
      <div class="container">
        <p>
          Built with <a href="https://astro.build" target="_blank" rel="noopener noreferrer">Astro</a> | 
          Data from <a href="https://news.ycombinator.com" target="_blank" rel="noopener noreferrer">Hacker News</a> via 
          <a href="https://hn.algolia.com/api" target="_blank" rel="noopener noreferrer">HN Search API</a>
        </p>
      </div>
    </footer>
  </body>
</html> 